;;;
$ ceu ceu/05-fs-lines-pull.ceu -cc "-g -lm"
;;;

task Split (chars) {
    yield()
    var line = ""
    while in :coro chars, c {
        if c == '\n' {
            yield(move(line))
            set line = ""
        } else {
            set line[+] = c
        }
    }
}

task Number (lines) {
    yield()
    var i = 1
    while in :coro lines, l {
        yield(tostring(i) ++ (": " ++ l))
        set i = i + 1
    }
}

task Take (n, lines) {
    yield()
    var i = 0
    while i < n {
        yield(resume lines())
        set i = i + 1
    }
}

;;spawn Show() <|< spawn Number(show) <|< spawn Split(number) <|< spawn UV-FS-Read(f,split)
;;addNumbers(extractNumbers(tokenize(CHARS)))

task FS-Read (filename) {
    var f = `:pointer fopen($filename.Dyn->Ncast.Vector.buf, "r")`
    defer {
        `fclose($f.Pointer);`
    }
    yield()
    until {
        var c = `:char fgetc($f.Pointer)`
        yield(c)
        c == `:char EOF`
    }
}

do { ;; PULL
    var read1   = spawn FS-Read("ceu/01-fs-cat.txt")
    var split1  = spawn Split(read1)
    var number1 = spawn Number(split1)
    var take1   = spawn Take(10, number1)
    while in :coro take1, l {
        println(l)
    }
}

do { ;; PUSH
    var read2   = spawn FS-Read("ceu/01-fs-cat.txt")
    var split2  = spawn Split(read2)
    var number2 = spawn Number(split2)
    var take2   = spawn Take(10, number2)

    task Show () {
        var line = yield()
        while line {
            println(line)
            set line = yield()
        }
    }

    task Send (iter, next) {
        while in :coro iter, v {
            resume next(v)
        }
    }

    spawn Send(take2, spawn Show())
}
